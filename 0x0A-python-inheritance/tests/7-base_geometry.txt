=================================
 Test for module 7-base_geometry
=================================

Import module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Cases:
    >>> bg = BaseGeometry()

    >>> bg.integer_validator("perro", 13)

    >>> bg.integer_validator("perro", int(5.3))

    >>> bg.integer_validator("perro", -13)
    Traceback (most recent call last):
    ValueError: perro must be greater than 0

    >>> bg.integer_validator("perro", 999999e99999)
    Traceback (most recent call last):
    TypeError: perro must be an integer

    >>> bg.integer_validator("perro", "cochino")
    Traceback (most recent call last):
    TypeError: perro must be an integer

    >>> bg.integer_validator("perro", 0)
    Traceback (most recent call last):
    ValueError: perro must be greater than 0

    >>> bg.integer_validator("perro", 0.8)
    Traceback (most recent call last):
    TypeError: perro must be an integer

    >>> bg.integer_validator("perro", int("ij"))
    Traceback (most recent call last):
    ValueError: invalid literal for int() with base 10: 'ij'

    >>> bg.integer_validator("perro", int)
    Traceback (most recent call last):
    TypeError: perro must be an integer

    >>> bg.integer_validator("perro", int(float('nan')))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> bg.integer_validator(9)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
    